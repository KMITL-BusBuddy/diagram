@startuml search passing lines

hide footbox

actor User

participant "Search\nScreen" as SearchScreen
participant "SelectMap\nScreen" as SelectMapScreen
' participant "RouteDetail\nScreen" as RouteDetailScreen
' participant "Map\nScreen" as RouteMapScreen


participant "Django\nURL Dispatcher" as API
participant "TransitStop\nView" as view
participant "TransitStop\nSerilizer" as serializer
database "transit_stops" as table_stop

' Do same as search_stop_information.puml

' User -> SearchScreen : startTypingSearchQuery(query)
' SearchScreen -> API : searchBusStops(query)
' API -> SearchScreen : returnSearchResults(busStops)
' SearchScreen -> User : displaySearchResults(busStops)

' User -> SearchScreen : clickSearchResult(busStop)
' SearchScreen -> RouteDetailScreen : navigateToRouteDetailScreen(busStop)
' RouteDetailScreen -> API : getRoutesForBusStop(busStop)
' API -> RouteDetailScreen : returnRoutesPassingBusStop(routes)
' RouteDetailScreen -> RouteDetailScreen : displayRoutesPassingBusStop(routes)
' RouteDetailScreen -> RouteMapScreen : displayRouteOnMap(routes)
' RouteMapScreen -> User : showRouteOnMap(routes)

' == Method 2: Select Bus Stop on Map ==
' User -> SearchScreen : clickSelectBusStopButton()
' SearchScreen -> SelectMapScreen : navigateToSelectMapScreen()
' User -> SelectMapScreen : selectBusStopOnMap(busStopLocation)
' SelectMapScreen -> SearchScreen : returnToSearchScreenWithSelectedBusStop(busStopLocation)
' SearchScreen -> SearchScreen : updateSearchFieldsWithBusStop(busStopLocation)
' SearchScreen -> User : displayUpdatedSearchFields(busStop)

opt Search by Typing
    User -> SearchScreen : enter search query
    activate User
    activate SearchScreen
    SearchScreen -> API : GET /transit-stops/search \nwith query_text
    activate API

    ' API Call
    API -> view: get(query_text)
    activate view
    view -> serializer: get(request)
    activate serializer
    serializer -> table_stop: serializer(query_set)
    activate table_stop
    table_stop --> serializer: transit_stops_data
    deactivate table_stop
    serializer --> view: transit_stops_data
    deactivate serializer
    view --> API: response()
    deactivate view
    
    ' Display Search Results
    API --> SearchScreen : stops_data
    deactivate API
    SearchScreen --> User : display search results

else Select Bus Stop on Map
    User -> SearchScreen : click SelectBusStop Button
    SearchScreen -> SelectMapScreen : goToSelectMapScreen()
    activate SelectMapScreen

    ' Select Bus Stop on Map
    User -> SelectMapScreen : select bus stop on map
    SelectMapScreen -> API : GET /transit-stops \nwith stop_id
    activate API
    API -> view: get(stop_id)
    activate view
    view -> serializer: get(request)
    activate serializer
    serializer -> table_stop: serializer(query_set)
    activate table_stop
    table_stop --> serializer: transit_stop_data
    deactivate table_stop
    serializer --> view: transit_stop_data
    deactivate serializer
    view --> API: response()
    deactivate view

    ' Display Bus Stop on Map
    API --> SelectMapScreen: stop_data
    deactivate API
    SelectMapScreen -> SearchScreen : returnToSearchScreen \nwith stop_data
    deactivate SelectMapScreen
    SearchScreen -> SearchScreen : updateSearchFields()
    SearchScreen --> User : display updated search fields
    deactivate SearchScreen
    deactivate User
end

' divide to 
' User -> SearchScreen : clickSearchResult(busStop)
' SearchScreen -> RouteDetailScreen : navigateToRouteDetailScreen(busStop)
' RouteDetailScreen -> API : getRoutesForBusStop(busStop)
' API -> RouteDetailScreen : returnRoutesPassingBusStop(routes)
' RouteDetailScreen -> RouteDetailScreen : displayRoutesPassingBusStop(routes)
' RouteDetailScreen -> RouteMapScreen : displayRouteOnMap(routes)
' RouteMapScreen -> User : showRouteOnMap(routes)

@enduml
